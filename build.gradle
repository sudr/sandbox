subprojects {
        apply plugin: 'java'
	apply plugin: 'eclipse'

	def cobSerFile="${project.buildDir}/cobertura.ser"
	def srcOriginal="${sourceSets.main.classesDir}"
	def srcCopy="${srcOriginal}-copy"

        repositories {
                mavenCentral()
        }
        dependencies {
		compile     'commons-lang:commons-lang:2.3'
		compile	    'org.slf4j:slf4j-log4j12:1.6.1'
		runtime     'org.slf4j:jcl-over-slf4j:1.5.6'
                testCompile 'org.testng:testng:5.12.1'
		testCompile 'org.codehaus.groovy:groovy:1.7.5'
		testRuntime 'org.easyb:easyb:0.9.8'
		testRuntime 'net.sourceforge.cobertura:cobertura:1.9.3'
        }

        group = 'info.sudr.sandbox'
        version = '0.0.1-SNAPSHOT'
        sourceCompatibility=1.6

	task initProject(description: 'Initialize project') << { task ->
		sourceSets.all*.java.srcDirs*.each { println "Create $it"; it.mkdirs() }
		sourceSets.all*.resources.srcDirs*.each { println "Create $it"; it.mkdirs() } 
	}

	check << { ant.taskdef(name: "easyb", classname:"org.easyb.ant.BehaviorRunnerTask", classpath: sourceSets.test.runtimeClasspath.asPath)

		def easybDir = new File(project.testResultsDir, 'easyb')
            	logger.info "Creating directory $easybDir"  // gradle -i shows this message.
            	easybDir.mkdirs()  // Create dir.

		ant.easyb(classpath: sourceSets.test.runtimeClasspath.asPath, failureProperty:'easyb_failed') {
			report(location:"${easybDir}/story.html", format:"html")
        		behaviors(dir: "src/test/java") {
            			include(name:"**/*.story")
        		}		
		}

		ant.fail(if:'easyb_failed', message: 'Failures in easyb stories')
	}

	test.doFirst  {
    		ant {
        		// delete data file for cobertura, otherwise coverage would be added
        		delete(file:cobSerFile, failonerror:false)
        		// delete copy of original classes
        		delete(dir: srcCopy, failonerror:false)
        		// import cobertura task, so it is available in the script
        		taskdef(resource:'tasks.properties', classpath: configurations.testRuntime.asPath)
        		// create copy (backup) of original class files
        		copy(todir: srcCopy) {
            			fileset(dir: srcOriginal)
        		}
        		// instrument the relevant classes in-place
        		'cobertura-instrument'(datafile:cobSerFile) {
            			fileset(dir: srcOriginal,
                   		includes:"build/classes/**/*.class",
                   		excludes:"**/*Test.class")
        		}
    		}
	}

	test {
    		systemProperties ["net.sourceforge.cobertura.datafile"] = cobSerFile
	}

	test.doLast {
		if (new File(srcCopy).exists()) {
        		// replace instrumented classes with backup copy again
        		ant {
            			delete(file: srcOriginal)
            			move(file: srcCopy,
                 	    	tofile: srcOriginal)
        		}
        		// create cobertura reports
			def coberturaDir = new File(project.testResultsDir, 'cobertura')
			coberturaDir.mkdirs()
        		ant.'cobertura-report'(destdir:"${coberturaDir}",
             		format:'html', srcdir:"src/main/java", datafile:cobSerFile)
    		}
	}
}

dependsOnChildren()
